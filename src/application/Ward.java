/**
 * Class: Ward
 * Description: Holds all of the beds that belong in the ward. Each bed is assigned a bed index and each bed is also
 * assigned an isolation factor (whether it is in isolation or not), therefore we don't require a separate room object to be 
 * stored under each ward. 
 * 
 * @author Marton Marek
 */

package application;

import java.io.Serializable;
import java.util.HashMap;

import application.exceptions.InvalidBedIndexException;

public class Ward implements Serializable {

	/**
	 * Autogenerated default serial version ID
	 */
	private static final long serialVersionUID = 1L;
	
	//used to determine how many beds can be in this ward 
	private final int MAX_BEDS = 19;
	
	//holds each bed object based on a bed index 
	HashMap<Integer, Bed> beds;
	
	/**
	 * Default Constructor 
	 */
	public Ward() {
		beds = new HashMap<Integer, Bed>();
	}
	
	/**
	 * Given a bed index, returns the Resident object assigned to the bed
	 * @param bedIndex
	 * @return Resident 
	 */
	public Resident getResident(int bedIndex) {
		if (beds.containsKey(bedIndex)) {
			return beds.get(bedIndex).getResident();
		}
		return null;
	}
	
	/**
	 * Assigns the given resident object to the given bed index
	 * @param bedIndex
	 * @param resident
	 */
	public void setResident(int bedIndex, Resident resident) {
		
		//as a precaution make sure bed index is >= 0
		if (bedIndex < 0 || bedIndex >= MAX_BEDS) {
			return;
		}
		
		//make sure this bed doesn't already contain a resident
		if (!beds.containsKey(bedIndex)) {
			beds.put(bedIndex, new Bed(resident));
		}
	}
	
	/**
	 * Deletes the resident at the given bed index
	 * @param bedIndex
	 */
	public void deleteResident(int bedIndex) {
		if (beds.containsKey(bedIndex)) {
			beds.remove(bedIndex);
		}
	}
	
	/**
	 * Replaces the existing resident at the specified bed ID with the given new resident 
	 * @param bedIndex
	 * @param resident
	 * @throws InvalidBedIndexException
	 */
	public void replaceResident(int bedIndex, Resident resident) throws InvalidBedIndexException {
		if (!beds.containsKey(bedIndex)) {
			throw new InvalidBedIndexException("The bed does not contain an existing resident");
		}
		else {
			beds.replace(bedIndex, new Bed(resident));
		}
	}
	
	/**
	 * Provides a count of how many residents are currently assigned to beds in this ward
	 * @return int
	 */
	public int residentTotal() {
		return beds.size();
	}
	
}
