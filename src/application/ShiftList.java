/**
 * Class: ShiftList
 * Description: Holds a list of Shifts (by default the list is 7 days long). One shift list is assigned to each employee
 * 
 * @author Marton Marek
 */

package application;

import java.io.Serializable;
import java.util.ArrayList;

public class ShiftList implements Serializable {
	
	/**
	 * Autogenerated default serial version ID
	 */
	private static final long serialVersionUID = 1L;

	//default shift list rotation is 7 days
	private final int DEFAULT_SHIFT_LIST_LENGTH = 7; 
	
	//array to store shift objects 
	private ArrayList<Shift> shiftList;
	
	/**
	 * Default Constructor  
	 */
	public ShiftList () {
		//shift list of default shift length size 
		shiftList = new ArrayList<Shift>(DEFAULT_SHIFT_LIST_LENGTH);
		initialise();
	}
		
	/**
	 * used to initialise the shift list to default values
	 */
	private void initialise() {

		int dayCount = 0;
		
		for (int i = 0; i < DEFAULT_SHIFT_LIST_LENGTH; i++) {
			dayCount++;
			//if we reach 7 (8th day) we need to reset i
			if (dayCount == 7) {
				i = 0;
			}
			
			//create and add default shift object 
			shiftList.add(new Shift(Day.values()[i]));
		}
	} 
	
	/**
	 * Used to update a specific shift day with start and end times. 
	 * 
	 * @param day
	 * @param timeString
	 * @param endString
	 * @throws NullPointerException
	 * @throws ArrayIndexOutOfBoundsException
	 */
	public void updateShift(Day day, String timeString, String endString) throws NullPointerException, ArrayIndexOutOfBoundsException {
		int timeInt;
		int endInt;
		int endHour;
		
		if (getShift(day) == null) {
			throw new NullPointerException("Shift not found in shift list!");
		}
		
		if (timeString.equals("None")) {
			timeInt = 0;
			endInt = 0;
		}
		else {
			String[] timeTokens = timeString.split(":");
			
			String[] endTokens = endString.split(":");
			
			timeInt = Integer.parseInt(timeTokens[0]);
			endInt = Integer.parseInt(endTokens[0]);
		}
		
		//we need to check whether the shift will go into the next day..
		if ((timeInt + endInt) == 24) {
			endHour = 0; //represents midnight
		}
		else if ((timeInt + endInt) > 24) {
			endHour = (timeInt + endInt) - 24;
		}
		else {
			endHour = timeInt + endInt;
		}
		
		//set start and end of the shift
		getShift(day).setShiftStartHour(timeInt);
		getShift(day).setShiftEndHour(endHour); 
	}
	

	/**
	 * returns the total length of the initialised shift list length
	 * @return int
	 */
	public int length() {
		return DEFAULT_SHIFT_LIST_LENGTH;
	}

	/**
	 * returns the total amount of items in the shift list
	 * @return int
	 */
	public int size() {
		return shiftList.size();
	}
	
	/**
	 * Getters and Setter methods
	 * @return
	 */
	public ArrayList<Shift> getList() {
		return shiftList;
	}
	
	public Shift getShift(Day day) {
		
		return shiftList.get(day.index);
	}
	
	public Shift getShift(int index) throws ArrayIndexOutOfBoundsException {
		return shiftList.get(index);
	}

	

}
